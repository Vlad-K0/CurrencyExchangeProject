
services:

  database:
    image: postgres:13
    container_name: currency_db
    restart: always

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: currency_exchange


    ports:
      - "5432:5432"

    # Том (volume) для хранения данных. Даже если удалить контейнер, данные останутся.
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_schema/init.sql:/docker-entrypoint-initdb.d/init.sql

    # Очень важная секция! Проверяет, что база данных не просто запустилась, а готова принимать подключения.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Сервис бэкенда (наше Java-приложение на Tomcat) ---
  backend:
    container_name: currency_backend # Даем контейнеру понятное имя

    # Главная инструкция: собрать образ, используя Dockerfile из текущей директории (.)
    build: .
    restart: always # Также перезапускаем в случае сбоя

    # Пробрасываем порт 8080 из контейнера на порт 8080 нашей машины
    ports:
      - "8080:8080"

    # Запускаем бэкенд ТОЛЬКО после того, как healthcheck базы данных будет успешным
    depends_on:
      database:
        condition: service_healthy

    # Передаем в наше приложение переменные окружения для подключения к БД
    # Важно: твой Java-код должен быть написан так, чтобы читать эти переменные
    environment:
      # URL для подключения. 'database' - это имя сервиса БД, как указано выше. Docker сам разрешит его в нужный IP-адрес.
      DB_URL: jdbc:postgresql://database:5432/currency_exchange
      DB_USER: postgres
      DB_PASSWORD: postgres # Пароль должен совпадать с тем, что указан в сервисе database

# Определяем том, который будет использоваться для хранения данных PostgreSQL
volumes:
  postgres_data: